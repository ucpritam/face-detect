{"version":3,"sources":["components/FaceRecognition/FaceRecognition.js","components/ImageLinkForm/ImageLinkForm.js","App.js","serviceWorker.js","index.js"],"names":["FaceRecognition","imageUrl","box","id","className","alt","src","map","key","style","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","onClick","text","document","getElementById","innerHTML","app","Clarifai","App","apiKey","calculateFaceLocation","data","image","width","Number","height","setState","outputs","regions","state","calculateface","region_info","bounding_box","left_col","top_row","right_col","bottom_row","displayFaceBox","event","input","target","value","models","predict","FACE_DETECT_MODEL","then","response","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.c25fd4e2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./FaceRecognition.css\";\r\n\r\nconst FaceRecognition = ({ imageUrl, box }) => {\r\n  var id = 1;\r\n  return (\r\n    <div className=\"center ma\">\r\n      <div className=\"absolute mt4\">\r\n        <img className=\"imagebox\" id=\"inputimage\" alt=\"\" src={imageUrl} />\r\n        {box.map((box) => {\r\n          return (\r\n            <div\r\n              key={id++}\r\n              className=\"bounding-box\"\r\n              style={{\r\n                top: box.topRow,\r\n                right: box.rightCol,\r\n                bottom: box.bottomRow,\r\n                left: box.leftCol,\r\n              }}\r\n            ></div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FaceRecognition;\r\n","import React from \"react\";\r\nimport \"./ImageLinkForm.css\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n\r\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit }) => {\r\n  return (\r\n    <div className=\"mt6\">\r\n      <span className=\"white head\">\r\n        {\"Enter the image link below to detect the face\"}\r\n      </span>\r\n      <div className=\"center\">\r\n        <div className=\"form center pa4 br3\">\r\n          <input className=\"font\" type=\"text\" onChange={onInputChange} />\r\n          <button className=\"button\" onClick={onButtonSubmit}>\r\n            <span className=\"detect\">Detect</span>\r\n          </button>\r\n          <CopyToClipboard text=\"https://akm-img-a-in.tosshub.com/indiatoday/images/story/201612/mcindia-fb-kirtibhoutika-story_647_122616125612.jpg\">\r\n            <button\r\n              id=\"isCopied\"\r\n              className=\"copy\"\r\n              onClick={() =>\r\n                (document.getElementById(\"isCopied\").innerHTML =\r\n                  \"<b>Copied</b>\")\r\n              }\r\n            >\r\n              <span className=\"detect\">Copy an URL</span>\r\n            </button>\r\n          </CopyToClipboard>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageLinkForm;\r\n","import React, { Component } from 'react';\r\nimport Clarifai from 'clarifai';\r\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\r\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\r\nimport './App.css';\r\n\r\nconst app = new Clarifai.App({\r\n  apiKey: '02c0199cb44047a3a3622732efd34544'\r\n });\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      input: '',\r\n      imageUrl: '',\r\n      box: [],\r\n      calculateface: []\r\n    }\r\n  }\r\n\r\n  calculateFaceLocation = (data) => {\r\n    const image = document.getElementById('inputimage');\r\n    const width = Number(image.width);\r\n    const height = Number(image.height);\r\n    this.setState({'calculateface': data.outputs[0].data.regions})\r\n    // var calculateface = data.outputs[0].data.regions; \r\n\r\n    return (this.state.calculateface.map((calculateface => {\r\n      return {\r\n          leftCol: calculateface.region_info.bounding_box.left_col * width,\r\n          topRow: calculateface.region_info.bounding_box.top_row * height,\r\n          rightCol: width - (calculateface.region_info.bounding_box.right_col * width),\r\n          bottomRow: height - (calculateface.region_info.bounding_box.bottom_row * height)\r\n        }\r\n    })))\r\n  }\r\n\r\ndisplayFaceBox = (box) => {\r\n  this.setState({box: box});\r\n}\r\n\r\nonInputChange = (event) => {\r\n    this.setState({input: event.target.value});\r\n  }\r\n\r\nonButtonSubmit = () => {\r\n  document.getElementById(\"error\").innerHTML=\"\";\r\n  this.setState({'calculateface' : []});\r\n  this.setState({'box' : []});\r\n  this.setState({imageUrl: this.state.input});\r\n  app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\r\n    .then(response => this.displayFaceBox(this.calculateFaceLocation(response)))\r\n    .catch(err => \r\n      document.getElementById(\"error\").innerHTML=\"Invalid URL/ Image does not contain any face.\");\r\n}\r\n\r\nrender() {\r\n  return (\r\n    <div className=\"App\">\r\n     <div className=\"white b f6 mt2 credit\">{\"Created by Pritam Majumder\"}</div>\r\n     <ImageLinkForm \r\n     onInputChange={this.onInputChange} \r\n     onButtonSubmit={this.onButtonSubmit}\r\n     />    \r\n     <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl}/>\r\n     <b id='error' className='white'></b>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}